// Package model contains all the models used in the application.
package model

import (
	"time"

	"go.mongodb.org/mongo-driver/bson/primitive"
)

// Post blog posts
type Post struct {
	// ID unique identifier for the post
	ID primitive.ObjectID `bson:"_id,omitempty" json:"mongo_id"`
	// CreatedAt time when the post was created
	CreatedAt time.Time `bson:"post_created_at" json:"created_at"`
	// ModifiedAt time when the post was last modified
	ModifiedAt time.Time `bson:"post_modified_gmt" json:"modified_at"`
	// Title title of the post
	Title string `bson:"post_title" json:"title"`
	// Type type of the post
	Type string `bson:"post_type" json:"type"`
	// Status status of the post
	Status string `bson:"post_status" json:"status"`
	// Name name of the post
	Name string `bson:"post_name" json:"name"`
	// Content content of the post
	Content string `bson:"post_content" json:"content"`
	// Markdown markdown content of the post
	Markdown string `bson:"post_markdown" json:"markdown"`
	// Author author of the post
	Author primitive.ObjectID `bson:"post_author,omitempty" json:"author"`
	// Menu menu of the post
	Menu string `bson:"post_menu" json:"menu"`
	// Password password of the post
	Password string `bson:"post_password" json:"-"`
	// Category category of the post
	Category primitive.ObjectID `bson:"category,omitempty" json:"category"`
	// Tags tags of the post
	Tags []string `bson:"post_tags" json:"tags"`
	// Hidden whether the post is hidden or not
	Hidden bool `bson:"hidden" json:"hidden"`
	// I18N internationalization of the post
	I18N PostI18N `bson:"i18n" json:"i18n"`
	// Language language of the post content or markdown
	Language string `bson:"-" json:"language"`
	// ArweaveId arweave id of the post
	ArweaveId []ArweaveHistoryItem `bson:"arweave_id" json:"arweave_id"`
}

type legacyOid struct {
	Oid string `json:"$oid"`
}

func (o legacyOid) ObjectId() (primitive.ObjectID, error) {
	return primitive.ObjectIDFromHex(o.Oid)
}

type legacyTime struct {
	Date string `json:"$date"`
}

func (t legacyTime) Time() (time.Time, error) {
	return time.Parse(time.RFC3339, t.Date)
}

type legacyI18N struct {
	UpdateAt legacyTime       `bson:"update_at" json:"update_at"`
	EnUs     PostI18NLanguage `bson:"en_us" json:"en_us"`
}

func (i legacyI18N) I18N() (PostI18N, error) {
	updateAt, err := i.UpdateAt.Time()
	if err != nil {
		return PostI18N{}, err
	}

	return PostI18N{
		UpdateAt: updateAt,
		EnUs:     i.EnUs,
	}, nil
}

// LegacyPost The old article history JSON was generated by Python,
// and the generated keys and structure are inconsistent with the new Go code,
// so the structure is redefined here to facilitate the conversion of the old data to the new data.
type LegacyPost struct {
	// ID unique identifier for the post
	ID legacyOid `bson:"_id,omitempty" json:"_id"`
	// CreatedAt time when the post was created
	CreatedAt legacyTime `bson:"post_created_at" json:"post_created_at"`
	// ModifiedAt time when the post was last modified
	ModifiedAt legacyTime `bson:"post_modified_gmt" json:"post_modified_gmt"`
	// Title title of the post
	Title string `bson:"post_title" json:"post_title"`
	// Type type of the post
	Type string `bson:"post_type" json:"post_type"`
	// Status status of the post
	Status string `bson:"post_status" json:"post_status"`
	// Name name of the post
	Name string `bson:"post_name" json:"post_name"`
	// Content content of the post
	Content string `bson:"post_content" json:"post_content"`
	// Markdown markdown content of the post
	Markdown string `bson:"post_markdown" json:"post_markdown"`
	// Author author of the post
	Author legacyOid `bson:"post_author,omitempty" json:"post_author"`
	// Menu menu of the post
	Menu string `bson:"post_menu" json:"post_menu"`
	// Password password of the post
	Password string `bson:"post_password" json:"-"`
	// Category category of the post
	Category legacyOid `bson:"category,omitempty" json:"category"`
	// Tags tags of the post
	Tags []string `bson:"post_tags" json:"post_tags"`
	// Hidden whether the post is hidden or not
	Hidden bool `bson:"hidden" json:"hidden"`
	// I18N internationalization of the post
	I18N legacyI18N `bson:"i18n" json:"i18n"`
	// Language language of the post content or markdown
	Language string `bson:"-" json:"language"`
	// ArweaveId arweave id of the post
	ArweaveId []ArweaveHistoryItem `bson:"arweave_id" json:"arweave_id"`
}

func (lp LegacyPost) Post() (p *Post, err error) {
	p = new(Post)
	if p.I18N, err = lp.I18N.I18N(); err != nil {
		return nil, err
	}

	if p.CreatedAt, err = lp.CreatedAt.Time(); err != nil {
		return nil, err
	}

	if p.ModifiedAt, err = lp.ModifiedAt.Time(); err != nil {
		return nil, err
	}

	p.ID, err = lp.ID.ObjectId()
	if err != nil {
		return nil, err
	}

	p.Author, err = lp.Author.ObjectId()
	if err != nil {
		return nil, err
	}

	p.Category, err = lp.Category.ObjectId()
	if err != nil {
		return nil, err
	}

	p.Title = lp.Title
	p.Type = lp.Type
	p.Status = lp.Status
	p.Name = lp.Name
	p.Content = lp.Content
	p.Markdown = lp.Markdown
	p.Menu = lp.Menu
	p.Password = lp.Password
	p.Tags = lp.Tags
	p.Hidden = lp.Hidden
	p.Language = lp.Language
	p.ArweaveId = lp.ArweaveId

	return p, nil
}

// ArweaveHistoryItem arweave history item
type ArweaveHistoryItem struct {
	Time time.Time `bson:"time" json:"time"`
	Id   string    `bson:"id" json:"id"`
}

// PostI18N blog post internationalization
type PostI18N struct {
	// UpdateAt time when the post was last modified
	UpdateAt time.Time `bson:"update_at" json:"update_at"`
	// EnUs english version
	EnUs PostI18NLanguage `bson:"en_us" json:"en_us"`
}

// PostI18NLanguage blog post internationalization language
type PostI18NLanguage struct {
	PostMarkdown string `bson:"post_markdown" json:"post_markdown"`
	PostContent  string `bson:"post_content" json:"post_content"`
	PostTitle    string `bson:"post_title" json:"post_title"`
	PostMenu     string `bson:"post_menu" json:"post_menu"`
}

// Category blog post categories
type Category struct {
	// ID unique identifier for the category
	ID primitive.ObjectID `bson:"_id,omitempty" json:"mongo_id"`
	// Name name of the category
	Name string `bson:"name" json:"name"`
	// URL url of the category
	URL string `bson:"url" json:"url"`
}

// PostSeries blog post series
type PostSeries struct {
	// ID unique identifier for the post series
	ID primitive.ObjectID `bson:"_id,omitempty" json:"mongo_id"`
	// Key key of the post series
	Key string `bson:"key" json:"key"`
	// Remark remark of the post series
	Remark string `bson:"remark" json:"remark"`
	// Posts posts of the post series
	Posts []primitive.ObjectID `bson:"posts" json:"posts"`
	// Chidlren child series
	Chidlren []primitive.ObjectID `bson:"children" json:"children"`
}

// PostTags blog post tags
type PostTags struct {
	// ID unique identifier for the post tags
	ID primitive.ObjectID `bson:"_id,omitempty" json:"mongo_id"`
	// Keywords keywords of the post tags
	Keywords []string `bson:"keywords" json:"keywords"`
	// ModifiedAtGMT last modified time of the post tags
	ModifiedAtGMT time.Time `bson:"modified_at_gmt" json:"modified_at_gmt"`
}
